// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for LineCoverageCoverage.
const (
	Covered     LineCoverageCoverage = "covered"
	Uncovered   LineCoverageCoverage = "uncovered"
	Unspecified LineCoverageCoverage = "unspecified"
)

// CommitCoverage defines model for commitCoverage.
type CommitCoverage struct {
	Coverage map[string][]LineCoverage `json:"coverage"`
}

// LineCoverage defines model for lineCoverage.
type LineCoverage struct {
	Coverage LineCoverageCoverage `json:"coverage"`
	Line     int                  `json:"line"`
}

// LineCoverageCoverage defines model for LineCoverage.Coverage.
type LineCoverageCoverage string

// AddCommitFilesCoverageJSONRequestBody defines body for AddCommitFilesCoverage for application/json ContentType.
type AddCommitFilesCoverageJSONRequestBody = CommitCoverage

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List files in commit with coverage
	// (GET /commits/{commit})
	ListCommitFilesCoverage(ctx echo.Context, commit string) error
	// Add new coverage info about files in commit
	// (POST /commits/{commit})
	AddCommitFilesCoverage(ctx echo.Context, commit string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListCommitFilesCoverage converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommitFilesCoverage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commit" -------------
	var commit string

	err = runtime.BindStyledParameterWithOptions("simple", "commit", ctx.Param("commit"), &commit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCommitFilesCoverage(ctx, commit)
	return err
}

// AddCommitFilesCoverage converts echo context to params.
func (w *ServerInterfaceWrapper) AddCommitFilesCoverage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "commit" -------------
	var commit string

	err = runtime.BindStyledParameterWithOptions("simple", "commit", ctx.Param("commit"), &commit, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCommitFilesCoverage(ctx, commit)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/commits/:commit", wrapper.ListCommitFilesCoverage)
	router.POST(baseURL+"/commits/:commit", wrapper.AddCommitFilesCoverage)

}
