// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: api/grpc/coverage/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoverageServiceClient is the client API for CoverageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoverageServiceClient interface {
	AddCommitCoverage(ctx context.Context, in *AddCommitCoverageRequest, opts ...grpc.CallOption) (*AddCommitCoverageResponse, error)
	GetCommitCoverage(ctx context.Context, in *GetCommitCoverageRequest, opts ...grpc.CallOption) (*GetCommitCoverageResponse, error)
}

type coverageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverageServiceClient(cc grpc.ClientConnInterface) CoverageServiceClient {
	return &coverageServiceClient{cc}
}

func (c *coverageServiceClient) AddCommitCoverage(ctx context.Context, in *AddCommitCoverageRequest, opts ...grpc.CallOption) (*AddCommitCoverageResponse, error) {
	out := new(AddCommitCoverageResponse)
	err := c.cc.Invoke(ctx, "/coverage.v1.CoverageService/AddCommitCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverageServiceClient) GetCommitCoverage(ctx context.Context, in *GetCommitCoverageRequest, opts ...grpc.CallOption) (*GetCommitCoverageResponse, error) {
	out := new(GetCommitCoverageResponse)
	err := c.cc.Invoke(ctx, "/coverage.v1.CoverageService/GetCommitCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverageServiceServer is the server API for CoverageService service.
// All implementations must embed UnimplementedCoverageServiceServer
// for forward compatibility
type CoverageServiceServer interface {
	AddCommitCoverage(context.Context, *AddCommitCoverageRequest) (*AddCommitCoverageResponse, error)
	GetCommitCoverage(context.Context, *GetCommitCoverageRequest) (*GetCommitCoverageResponse, error)
	mustEmbedUnimplementedCoverageServiceServer()
}

// UnimplementedCoverageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoverageServiceServer struct {
}

func (UnimplementedCoverageServiceServer) AddCommitCoverage(context.Context, *AddCommitCoverageRequest) (*AddCommitCoverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommitCoverage not implemented")
}
func (UnimplementedCoverageServiceServer) GetCommitCoverage(context.Context, *GetCommitCoverageRequest) (*GetCommitCoverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitCoverage not implemented")
}
func (UnimplementedCoverageServiceServer) mustEmbedUnimplementedCoverageServiceServer() {}

// UnsafeCoverageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoverageServiceServer will
// result in compilation errors.
type UnsafeCoverageServiceServer interface {
	mustEmbedUnimplementedCoverageServiceServer()
}

func RegisterCoverageServiceServer(s grpc.ServiceRegistrar, srv CoverageServiceServer) {
	s.RegisterService(&CoverageService_ServiceDesc, srv)
}

func _CoverageService_AddCommitCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommitCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServiceServer).AddCommitCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coverage.v1.CoverageService/AddCommitCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServiceServer).AddCommitCoverage(ctx, req.(*AddCommitCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoverageService_GetCommitCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServiceServer).GetCommitCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coverage.v1.CoverageService/GetCommitCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServiceServer).GetCommitCoverage(ctx, req.(*GetCommitCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoverageService_ServiceDesc is the grpc.ServiceDesc for CoverageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoverageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coverage.v1.CoverageService",
	HandlerType: (*CoverageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommitCoverage",
			Handler:    _CoverageService_AddCommitCoverage_Handler,
		},
		{
			MethodName: "GetCommitCoverage",
			Handler:    _CoverageService_GetCommitCoverage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/coverage/v1/service.proto",
}
